<script lang="ts">
  import '../app.postcss';
  import { onMount } from 'svelte';
  import type { Snippet } from 'svelte';
  import type { AgentPubKey } from '@holochain/client';
  import usersStore from '$lib/stores/users.store.svelte';
  import hc from '$lib/services/HolochainClientService.svelte';
  import administrationStore from '$lib/stores/administration.store.svelte';
  import {
    Modal,
    Drawer,
    Toast,
    getDrawerStore,
    getModalStore,
    getToastStore,
    type ModalComponent,
    type ModalSettings,
    ConicGradient,
    type ConicStop
  } from '@skeletonlabs/skeleton';
  import { initializeStores as skeletonInitializeStores } from '@skeletonlabs/skeleton';
  import { goto } from '$app/navigation';
  import { computePosition, autoUpdate, offset, shift, flip, arrow } from '@floating-ui/dom';
  import { storePopup } from '@skeletonlabs/skeleton';
  import { page } from '$app/state';
  import AdminMenuDrawer from '$lib/components/shared/drawers/AdminMenuDrawer.svelte';
  import MenuDrawer from '$lib/components/shared/drawers/MenuDrawer.svelte';
  import ConfirmModal from '$lib/components/shared/dialogs/ConfirmModal.svelte';
  import type { ConfirmModalMeta } from '$lib/types/ui';
  import hreaStore from '$lib/stores/hrea.store.svelte';
  import { useBackgroundAdminCheck } from '$lib/composables/connection/useBackgroundAdminCheck.svelte';
  import { storeEventBus } from '$lib/stores/storeEvents';
  import { initializeToast } from '$lib/utils/toast';
  import NavBar from '$lib/components/shared/NavBar.svelte';
  import { setConnectionStatusContext } from '$lib/context/connection-status.context.svelte';
  import { connectToHolochain, isHolochainConnected } from '$lib/utils/simple-connection';

  type Props = {
    children: Snippet;
  };

  const { children } = $props() as Props;

  const currentUser = $derived(usersStore.currentUser);

  // Background admin status checking
  const backgroundAdminCheck = useBackgroundAdminCheck();
  const agentIsAdministrator = $derived(backgroundAdminCheck.isAdmin);

  // Simple loading state
  let isLoading = $state(true);
  let connectionError = $state<string | null>(null);

  // Check if current route is admin
  const isAdminRoute = $derived(page.url.pathname.startsWith('/admin'));

  storePopup.set({ computePosition, autoUpdate, offset, shift, flip, arrow });

  skeletonInitializeStores();

  // Simple initialization
  onMount(async () => {
    console.log('🚀 Starting simple application initialization...');

    try {
      // Just connect to Holochain with timeout
      const connected = await connectToHolochain();

      if (connected) {
        console.log('✅ Holochain connected successfully');
        isLoading = false;

        // Initialize hREA in background (non-blocking)
        setTimeout(() => {
          runEffect(hreaStore.initialize()).catch(error => {
            console.warn('⚠️ hREA initialization failed (non-critical):', error);
          });
        }, 1000);

        // Load user data in background
        setTimeout(() => {
          runEffect(usersStore.loadCurrentUser()).catch(error => {
            console.warn('⚠️ User loading failed:', error);
          });
        }, 500);

      } else {
        console.error('❌ Failed to connect to Holochain');
        connectionError = 'Failed to connect to Holochain. Please refresh the page.';
        isLoading = false;
      }

    } catch (error) {
      console.error('❌ Initialization failed:', error);
      connectionError = 'Initialization failed. Please refresh the page.';
      isLoading = false;
    }
  });
  const drawerStore = getDrawerStore();
  const modalStore = getModalStore();
  const toastStore = getToastStore();

  /* This admin registration process is temporary. It simulates the Holochain Progenitor pattern by allowing only the first user to become administrator when no administrators exist. */
  const conicStops: ConicStop[] = [
    { color: 'transparent', start: 0, end: 0 },
    { color: 'rgb(var(--color-primary-500))', start: 75, end: 50 }
  ];

  const confirmModalComponent: ModalComponent = { ref: ConfirmModal };

  /**
   * Effect-first admin registration process that simulates the Holochain Progenitor pattern.
   *
   * TODO: Remove this once the admin registration process is implemented in the Holochain Progenitor pattern.
   */
  function showProgenitorAdminRegistrationModal() {
    // Create Effect program for admin checking
    const checkAdminsProgram = E.gen(function* () {
      const admins = yield* E.tryPromise({
        try: async () => await runEffect(administrationStore.getAllNetworkAdministrators()),
        catch: (error) => new Error(`Failed to check administrators: ${error}`)
      });

      const hasAdmins = admins.length > 0;

      if (hasAdmins) {
        yield* Console.log('Administrators already exist, skipping registration modal');
        return false; // Don't show modal
      }

      return true; // Show modal
    });

    // Execute Effect directly in event handler context using runEffectInSvelte
    runEffectInSvelte(checkAdminsProgram, {
      onSuccess: (shouldShowModal) => {
        if (shouldShowModal) {
          displayAdminRegistrationModal();
        }
      },
      onError: (error) => {
        console.error('Admin check failed:', error);
        handleLayoutError(`Error checking administrator status: ${error.message}`);
      },
      timeout: Duration.seconds(10)
    });
  }

  /**
   * Displays the admin registration modal with Effect-first registration logic
   */
  function displayAdminRegistrationModal() {
    // If no administrators exist, allow this user to become the first administrator
    const adminRegistrationModalMeta: ConfirmModalMeta = {
      id: 'progenitor-admin-registration',
      message: `
        <div class="text-center space-y-4">
          <div class="text-warning-500">
            <svg class="w-12 h-12 mx-auto mb-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="space-y-3">
            <h3 class="text-lg font-semibold text-surface-100">Network Initialization</h3>
            <p class="text-surface-300">No administrators exist in this network yet.</p>
            <div class="bg-primary-500/10 border border-primary-500/20 rounded-lg p-3">
              <p class="text-primary-300 text-sm font-medium">🌟 Progenitor Opportunity</p>
              <p class="text-surface-200 text-sm mt-1">As the first user, you can become the initial administrator and help establish this community.</p>
            </div>
            <p class="text-surface-100 font-medium">Do you want to become the network administrator?</p>
          </div>
        </div>
      `,
      confirmLabel: '✨ Become Administrator',
      cancelLabel: 'Not Now'
    };

    const modal: ModalSettings = {
      type: 'component',
      component: confirmModalComponent,
      meta: adminRegistrationModalMeta,
      response: (confirmed: boolean) => {
        if (!confirmed) {
          modalStore.close();
          return;
        }

        // Create Effect-first admin registration program
        const adminRegistrationProgram = E.gen(function* () {
          // Validate current user
          if (!currentUser?.original_action_hash) {
            yield* E.fail(new Error('No current user found'));
          }

          // Get agent public key with built-in retry
          const agentPubKey = yield* E.retry(
            E.tryPromise({
              try: async () => {
                const appInfo = await hc.getAppInfo();
                const pubKey = appInfo?.agent_pub_key;
                if (!pubKey) throw new Error('No agent public key found');
                return pubKey;
              },
              catch: (error) => new Error(`Failed to get app info: ${error}`)
            }),
            Schedule.exponential(Duration.millis(500), 2.0)
          );

          // Register as network administrator with retry
          yield* E.retry(
            E.tryPromise({
              try: async () => {
                const registrationResult = await runEffect(
                  administrationStore.registerNetworkAdministrator(
                    currentUser!.original_action_hash!,
                    [agentPubKey as AgentPubKey]
                  )
                );
                if (!registrationResult) {
                  throw new Error('Registration returned false');
                }
                return registrationResult;
              },
              catch: (error) => new Error(`Admin registration failed: ${error}`)
            }),
            Schedule.exponential(Duration.millis(500), 2.0)
          );

          // Refresh administrator data with retry
          yield* E.retry(
            E.tryPromise({
              try: async () => {
                // Re-initialize to refresh all admin data including status
                await E.runPromise(
                  pipe(
                    administrationStore.initialize(),
                    E.provide(HolochainClientServiceLive)
                  ) as E.Effect<void, AdministrationError, never>
                );
                console.log('✅ Administration data refreshed after registration');
              },
              catch: (error) => new Error(`Failed to refresh admin data: ${error}`)
            }),
            Schedule.exponential(Duration.millis(500), 2.0)
          );

          return { success: true, message: 'Successfully registered as administrator' };
        });

        // Execute with error boundary
        runEffectInSvelte(adminRegistrationProgram, {
          onSuccess: (result: { success: boolean; message: string }) => {
            toastStore.trigger({
              message: result.message,
              background: 'variant-filled-success',
              autohide: true,
              timeout: 5000
            });
          },
          onError: (error: Error) => {
            console.error('Admin registration failed:', error);
            const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
            toastStore.trigger({
              message: `Failed to register as administrator: ${errorMessage}`,
              background: 'variant-filled-error',
              autohide: true,
              timeout: 5000
            });
          },
          timeout: Duration.seconds(15)
        });

        modalStore.close();
      }
    };

    modalStore.trigger(modal);
  }

  initializeToast();

  // ============================================================================
  // EFFECT-FIRST ERROR HANDLING
  // ============================================================================

  // Create unified error handler for layout initialization
  const handleLayoutError = (errorMessage: string) => {
    console.error('Layout initialization error:', errorMessage);
    toastStore.trigger({
      message: `Initialization Issue: ${errorMessage}. The app will continue in minimal mode.`,
      background: 'variant-filled-warning',
      autohide: false
    });
  };

  // Keep the error boundary concept but simplified

  // Connection status context for sharing across layouts

  // Set connection status context for child layouts
  setConnectionStatusContext({
    connectionStatus: () => connectionStatus,
    lastPingTime: () => lastPingTime,
    pingError: () => pingError,
    adminLoadingStatus: () => adminLoadingStatus
  });

  // Listen for admin-related events that might change admin status
  onMount(() => {
    const resetAdminStatusOnChange = () => {
      // Reset admin loading status to trigger fresh check on next admin route access
      if (adminLoadingStatus === 'loaded' || adminLoadingStatus === 'failed') {
        console.log('🔄 Admin status may have changed, resetting for fresh check...');
        adminLoadingStatus = 'pending';
      }
    };

    // Only listen for events that actually affect the current user's admin status
    // User acceptance/rejection doesn't change ADMIN status - only administrator add/remove does
    const unsubscribeAdminAdded = storeEventBus.on('administrator:added', resetAdminStatusOnChange);
    const unsubscribeAdminRemoved = storeEventBus.on(
      'administrator:removed',
      resetAdminStatusOnChange
    );

    return () => {
      unsubscribeAdminAdded();
      unsubscribeAdminRemoved();
    };
  });

  // Reactive effect to manage dark mode based on current route
  $effect(() => {
    const htmlElement = document.getElementsByTagName('html')[0];
    if (page.url.pathname.startsWith('/admin')) {
      htmlElement.classList.add('dark');
    } else {
      htmlElement.classList.remove('dark');
    }
  });

  // Reactive effect to load admin data when navigating to admin routes
  $effect(() => {
    if (isAdminRoute && adminLoadingStatus === 'pending' && hc.isConnected) {
      console.log('🔍 Admin route detected, starting admin initialization...');

      // Start background admin initialization only when needed
      runEffectInSvelte(backgroundAdminInitProgram, {
        onError: (error) => {
          console.warn('Admin initialization failed:', error);
          // Don't show toast for admin failures - the admin layout will handle this
        },
        timeout: Duration.seconds(15)
      });
    }
  });

  // ============================================================================
  // EFFECT-FIRST APPLICATION INITIALIZATION WITH INTEGRATION UTILITIES
  // ============================================================================

  /**
   * Effect-first application initialization program with detailed progress tracking.
   *
   * This preserves all existing functionality while adding:
   * - Detailed step-by-step progress tracking
   * - Structured error handling with Effect boundaries
   * - Timeout management for long-running operations
   * - Proper resource cleanup and fiber management
   * - Type-safe error contexts
   */
  const appInitializationProgram = E.gen(function* () {
    // Update initialization status
    yield* E.sync(() => {
      initializationStatus = 'initializing';
      console.log('🚀 Starting Effect-first application initialization...');
    });

    // 1. Connect to Holochain client first
    yield* E.sync(() => updateStep('client', 'running', 'Establishing connection...'));
    yield* E.tryPromise({
      try: async () => {
        await hc.connectClient();
        console.log('✅ Holochain client connected');

        // Log network seed for user verification during testing
        try {
          console.log('🔍 Attempting to retrieve network seed...');
          console.log('🔍 Client status:', !!hc.client);
          console.log('🔍 Is connected:', hc.isConnected);

          // First try a simple ping to verify zome calls work
          const pingResult = await hc.callZome('misc', 'ping', null);
          console.log('🏓 Ping test result:', pingResult);

          // Log raw network objects from zome calls
          try {
            const networkInfo = await hc.getNetworkInfo();
            console.log('🌐 Network Info:', networkInfo);
          } catch (networkInfoError) {
            console.warn('⚠️ Could not get network info:', networkInfoError);
          }

          try {
            const networkSeed = await hc.getNetworkSeed();
            console.log('🌱 Network Seed:', networkSeed);
          } catch (seedError) {
            console.warn('⚠️ Could not get network seed:', seedError);
          }
        } catch (seedError) {
          console.warn('⚠️ Error retrieving network information:', seedError);
          console.log('ℹ️ Network information will be available after successful zome connection');
        }

        updateStep('client', 'completed', 'Connected successfully');
      },
      catch: (error) => {
        updateStep('client', 'failed', `Connection failed: ${error}`);
        throw new Error(`Holochain connection failed: ${error}`);
      }
    });

    // 2. Initialize hREA service (non-critical with timeout and graceful fallback)
    yield* E.sync(() => updateStep('hrea', 'running', 'Initializing hREA GraphQL...'));
    yield* E.catchAll(
      pipe(
        E.tryPromise({
          try: async () => {
            await runEffect(
              pipe(
                hreaStore.initialize(),
                E.timeout(Duration.seconds(8)), // 8-second timeout for hREA initialization
                E.catchTag('TimeoutException', () =>
                  E.fail(new Error('hREA initialization timed out after 8 seconds'))
                )
              )
            );
            console.log('✅ hREA initialized successfully');
            updateStep('hrea', 'completed', 'hREA service ready');
          },
          catch: (error) => {
            updateStep('hrea', 'failed', `hREA failed: ${error}`);
            throw new Error(`hREA initialization failed: ${error}`);
          }
        }),
        E.mapError((error) => error as Error)
      ),
      (error) =>
        E.sync(() => {
          console.warn('⚠️ hREA initialization failed (non-critical):', error);
          updateStep('hrea', 'skipped', 'Skipped due to error (non-critical)');
          return undefined; // Continue without hREA
        })
    );

    // Mark initialization as complete
    yield* E.sync(() => {
      initializationStatus = 'complete';
      console.log('🎉 Effect-first application initialization completed successfully!');

      // Log network info after initialization
      E.runPromise(
        E.gen(function* () {
          try {
            const networkInfo = yield* E.tryPromise({
              try: async () => await hc.getNetworkInfo(),
              catch: (error) => new Error(`Failed to get network info: ${error}`)
            });
            console.log('🌐 Network Info (post-init):', networkInfo);
          } catch (error) {
            console.warn('⚠️ Could not get network info after init:', error);
          }
        })
      );
    });

    return { status: 'success', message: 'Application initialized successfully' };
  });

  /**
   * Background user data loading that runs after core initialization.
   * This loads user data without blocking app startup.
   */
  const backgroundUserLoadingProgram = E.gen(function* () {
    yield* E.sleep(Duration.millis(200)); // Small delay to let UI render first

    console.log('🔍 Starting background user data loading...');

    yield* E.catchAll(
      E.tryPromise({
        try: async () => {
          await runEffect(usersStore.refresh());
          console.log('✅ User data loaded in background');
        },
        catch: (error) => {
          throw new Error(`Background user data loading failed: ${error}`);
        }
      }),
      (error) =>
        E.sync(() => {
          console.warn('⚠️ Background user data loading failed (non-critical):', error);
          return undefined;
        })
    );
  });

  /**
   * Background administration initialization that runs when needed for admin routes.
   * This loads admin data on-demand when accessing admin functionality.
   */
  const backgroundAdminInitProgram = E.gen(function* () {
    yield* E.sleep(Duration.millis(100)); // Minimal delay to let main UI render

    console.log('🔍 Starting conditional admin initialization...');
    adminLoadingStatus = 'loading';

    const agentPubKey = yield* E.tryPromise({
      try: async () => (await hc.getAppInfo())?.agent_pub_key,
      catch: (error) => new Error(`Failed to get app info: ${error}`)
    });

    if (agentPubKey) {
      // Initialize administration data with graceful error handling
      yield* E.catchAll(
        E.tryPromise({
          try: async () => {
            // Use the centralized initialize method which now includes admin status check
            await E.runPromise(
              pipe(
                administrationStore.initialize(),
                E.provide(HolochainClientServiceLive)
              ) as E.Effect<void, AdministrationError, never>
            );
            console.log(
              '✅ Administration store initialized:',
              `${administrationStore.administrators.length} administrators,`,
              `agent is admin: ${administrationStore.agentIsAdministrator}`
            );
            adminLoadingStatus = 'loaded';
          },
          catch: (error) => {
            adminLoadingStatus = 'failed';
            throw new Error(`Administration initialization failed: ${error}`);
          }
        }),
        (error) =>
          E.sync(() => {
            console.warn('⚠️ Administration initialization failed (non-critical):', error);
            adminLoadingStatus = 'failed';
            return undefined;
          })
      );
    } else {
      console.log('⚠️ No agent pub key available for admin initialization');
      adminLoadingStatus = 'failed';
    }
  });

  /**
   * Background connection verification that runs after initialization.
   * This doesn't block app startup but provides connection status feedback.
   */
  const backgroundPingProgram = E.gen(function* () {
    yield* E.sleep(Duration.millis(500)); // Small delay to let UI render first

    connectionStatus = 'checking';
    console.log('🔍 Starting background connection verification...');

    yield* E.retry(
      E.tryPromise({
        try: async () => {
          const result = await hc.callZome('misc', 'ping', null);
          connectionStatus = 'connected';
          lastPingTime = new Date();
          pingError = null;
          console.log('✅ Background ping successful');

          // Log network info during background ping
          try {
            const networkInfo = await hc.getNetworkInfo();
            console.log('🌐 Network Info (background):', networkInfo);
          } catch (networkInfoError) {
            console.warn('⚠️ Background network info failed:', networkInfoError);
          }

          return result;
        },
        catch: (error) => {
          throw new Error(`Ping failed: ${error}`);
        }
      }),
      // Retry schedule: 3 attempts with exponential backoff
      Schedule.exponential('1 second').pipe(
        Schedule.intersect(Schedule.recurs(2)) // Max 3 total attempts
      )
    ).pipe(
      E.timeout(Duration.seconds(30)),
      E.catchAll((error) =>
        E.sync(() => {
          const isTimeout =
            error &&
            typeof error === 'object' &&
            'tag' in error &&
            error.tag === 'TimeoutException';
          connectionStatus = isTimeout ? 'disconnected' : 'error';
          pingError = isTimeout
            ? 'Connection timeout'
            : error instanceof Error
              ? error.message
              : 'Unknown error';
          console.warn('⚠️ Background ping failed:', error);
          return undefined; // Don't fail the entire program
        })
      )
    );
  });

  /**
   * Background hREA initialization retry program that runs after main app is ready
   * This ensures hREA is eventually available without blocking startup
   */
  const backgroundHreaRetryProgram = E.gen(function* () {
    // Check if hREA is already initialized
    if (hreaStore.apolloClient) {
      console.log('🔄 hREA already initialized, skipping background retry');
      return;
    }

    console.log('🔄 Starting background hREA initialization retry...');

    // Retry hREA initialization with exponential backoff
    yield* pipe(
      E.tryPromise({
        try: async () => {
          await runEffect(
            pipe(
              hreaStore.initialize(),
              E.timeout(Duration.seconds(15)), // Longer timeout for background retry
              E.catchTag('TimeoutException', () =>
                E.fail(new Error('Background hREA initialization timed out'))
              )
            )
          );
        },
        catch: (error) => {
          console.warn('⚠️ Background hREA initialization attempt failed:', error);
          throw error;
        }
      }),
      // Retry with exponential backoff - max 3 attempts
      E.retry(
        Schedule.exponential('2 seconds').pipe(
          Schedule.intersect(Schedule.recurs(2)) // Max 3 total attempts
        )
      ),
      E.catchAll((error) => {
        console.warn(
          '⚠️ All background hREA initialization attempts failed, will retry later:',
          error
        );
        return E.void; // Don't fail the program
      })
    );

    if (hreaStore.apolloClient) {
      console.log('✅ Background hREA initialization successful');
    }
  });

  // Create error boundary for structured error handling
  const layoutErrorBoundary = createGenericErrorBoundary<Error>((message) => {
    handleLayoutError(`Application initialization failed: ${message}`);
  });

  // Use Effect-SvelteKit integration utility with error boundary and timeout
  useEffectOnMount(
    E.gen(function* () {
      // Run the main initialization program
      const result = yield* appInitializationProgram;

      // Start background user data loading after successful initialization
      runEffectInSvelte(backgroundUserLoadingProgram, {
        onError: (error) => {
          console.warn('Background user loading failed:', error);
          // Don't show toast for user loading failures - components will handle gracefully
        },
        timeout: Duration.seconds(15)
      });

      // Start background ping verification after successful initialization
      runEffectInSvelte(backgroundPingProgram, {
        onError: (error) => {
          console.warn('Background ping program failed:', error);
          // Don't show toast for background ping failures
        },
        timeout: Duration.seconds(20)
      });

      // Start background hREA initialization retry if it failed during startup
      runEffectInSvelte(backgroundHreaRetryProgram, {
        onError: (error) => {
          console.warn('Background hREA retry program failed:', error);
          // Silently fail - hREA is non-critical
        },
        timeout: Duration.seconds(10)
      });

      return result;
    }),
    {
      errorBoundary: layoutErrorBoundary,
      timeout: Duration.seconds(20) // Reduced timeout since we removed blocking admin step
    }
  );

  async function handleKeyboardEvent(event: KeyboardEvent) {
    if (agentIsAdministrator && event.altKey && (event.key === 'a' || event.key === 'A')) {
      event.preventDefault();
      if (!window.location.pathname.startsWith('/admin')) goto('/admin');
      else goto('/');
    }

    if (
      currentUser &&
      !agentIsAdministrator &&
      event.ctrlKey &&
      event.shiftKey &&
      (event.key === 'a' || event.key === 'A')
    ) {
      event.preventDefault();
      showProgenitorAdminRegistrationModal();
    }
  }
</script>

<svelte:window onkeydown={handleKeyboardEvent} />

{#if connectionStatus !== 'connected' || initializationStatus === 'initializing'}
  <div class="flex min-h-screen flex-col items-center justify-center space-y-6 p-8">
    <div class="text-center">
      {#if initializationStatus === 'initializing'}
        <h2 class="mb-2 text-2xl font-semibold">Initializing Application Runtime</h2>
        <p class="text-surface-600 dark:text-surface-400">
          Setting up core services... User data and admin features will load in background.
        </p>
      {:else}
        <h2 class="mb-2 text-2xl font-semibold">Connecting to Holochain Network</h2>
        <p class="text-surface-600 dark:text-surface-400">Establishing secure connection...</p>
      {/if}
    </div>

    <!-- Progress indicator -->
    {#if initializationStatus === 'initializing'}
      <div class="w-full max-w-md">
        <!-- Progress bar -->
        <div class="mb-4">
          <div class="mb-1 flex justify-between text-sm text-surface-500 dark:text-surface-400">
            <span>Progress</span>
            <span>{Math.round(progressPercentage)}%</span>
          </div>
          <div class="h-2 w-full rounded-full bg-surface-300 dark:bg-surface-700">
            <div
              class="h-2 rounded-full bg-primary-500 transition-all duration-300 ease-out"
              style="width: {progressPercentage}%"
            ></div>
          </div>
        </div>

        <!-- Initialization steps -->
        <div class="space-y-3 text-left">
          {#each initializationSteps as step}
            <div
              class="flex items-center space-x-3 rounded-lg bg-surface-100 p-3 dark:bg-surface-800"
            >
              <!-- Status icon -->
              <div class="flex-shrink-0">
                {#if step.status === 'completed'}
                  <svg class="h-5 w-5 text-success-500" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                      clip-rule="evenodd"
                    ></path>
                  </svg>
                {:else if step.status === 'running'}
                  <svg
                    class="h-5 w-5 animate-spin text-primary-500"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      class="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      stroke-width="4"
                    ></circle>
                    <path
                      class="opacity-75"
                      fill="currentColor"
                      d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>
                  </svg>
                {:else if step.status === 'failed'}
                  <svg class="h-5 w-5 text-error-500" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                      clip-rule="evenodd"
                    ></path>
                  </svg>
                {:else if step.status === 'skipped'}
                  <svg class="h-5 w-5 text-warning-500" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                      clip-rule="evenodd"
                    ></path>
                  </svg>
                {:else}
                  <div
                    class="h-5 w-5 rounded-full border-2 border-surface-400 dark:border-surface-500"
                  ></div>
                {/if}
              </div>

              <!-- Step info -->
              <div class="min-w-0 flex-1">
                <div class="flex items-center justify-between">
                  <h4 class="text-sm font-medium text-surface-900 dark:text-surface-100">
                    {step.name}
                  </h4>
                  <span class="text-xs capitalize text-surface-500 dark:text-surface-400">
                    {step.status === 'running' ? 'In Progress' : step.status}
                  </span>
                </div>
                {#if step.message}
                  <p class="mt-1 truncate text-xs text-surface-600 dark:text-surface-400">
                    {step.message}
                  </p>
                {/if}
              </div>
            </div>
          {/each}
        </div>
      </div>
    {:else}
      <ConicGradient stops={conicStops} spin>Loading</ConicGradient>
    {/if}

    <div class="max-w-md text-center text-sm text-surface-500 dark:text-surface-400">
      {#if initializationStatus === 'failed'}
        <p class="text-warning-400">⚠️ Initialization encountered issues.</p>
      {:else if initializationStatus === 'initializing'}
        <p>This usually takes 5-15 seconds.</p>
      {:else}
        <p>If this takes longer than usual, try restarting the application from the system tray.</p>
      {/if}
    </div>
  </div>
{:else if page.url.pathname.startsWith('/admin')}
  <!-- Admin routes use their own layout -->
  {@render children()}
{:else}
  <!-- Main app routes with navigation -->
  <div class="grid min-h-screen grid-rows-[auto_1fr]">
    <NavBar {connectionStatus} {lastPingTime} {pingError} />
    <main class="flex flex-col items-center justify-center py-10">
      {@render children()}
    </main>
  </div>
{/if}

<Modal />
<Toast />
<Drawer>
  {#if $drawerStore.id === 'menu-drawer'}
    {#if page.url.pathname.startsWith('/admin')}
      <AdminMenuDrawer />
    {:else}
      <MenuDrawer />
    {/if}
  {/if}
</Drawer>
